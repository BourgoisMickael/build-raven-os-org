version: "3.7"
services:

  # Frontend
  front:
    build:
      context: ./front/
      args:
        VUE_APP_API_HOST: ${HOST}
        VUE_APP_API_PORT: ${PORT}
        VUE_APP_API_PROTOCOL: ${PROTOCOL}
    init: true
    restart: on-failure
    networks:
      - frontend
    ports:
      - ${FRONT_EXPOSED_PORT}:8080

  # API
  api:
    build: ./server/
    init: true
    restart: on-failure
    depends_on:
      - db
      - rabbit_mq
    networks:
      - backend
      - frontend
    ports:
      - ${PORT}:${PORT}
    environment:
      NODE_ENV: ${NODE_ENV}
      PORT: ${PORT}
      DATABASE_HOST: "${DATABASE_HOST}"
      DATABASE_PORT: ${DATABASE_PORT}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      CORS_ORIGIN: ${CORS_ORIGIN}
      CORS_CREDENTIALS: ${CORS_CREDENTIALS}
      BUILDER_APIKEY: ${APIKEYS_BUILDER_API}
      PAGINATION_DEFAULT_ITEM_PER_PAGE: ${PAGINATION_DEFAULT_ITEM_PER_PAGE}
      RABBIT_MQ_URL: ${RABBIT_MQ_URL}
      RABBIT_MQ_RETRY_COUNT: ${RABBIT_MQ_RETRY_COUNT}
      RABBIT_MQ_RETRY_INTERVAL: ${RABBIT_MQ_RETRY_INTERVAL}
      MAILER_FAKE: ${MAILER_FAKE}
      MAILER_FROM: ${MAILER_FROM}
      MAILER_HOST: ${MAILER_HOST}
      MAILER_PORT: ${MAILER_PORT}
      MAILER_AUTH_USER: ${MAILER_AUTH_USER}
      MAILER_AUTH_PASS: ${MAILER_AUTH_PASS}
      SESSION_SECRET: ${SESSION_SECRET}
      ADMIN_EMAIL: ${ADMIN_EMAIL}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD}

  # Builder
  builder:
    build: ./builder/
    tty: true
    restart: on-failure
    depends_on:
      - rabbit_mq
      - api
    networks:
      - backend
    environment:
      NODE_ENV: ${NODE_ENV}
      BUILD_API_URL: ${BUILD_API_URL}
      MANIFEST_DIR: ${MANIFEST_DIR}
      OUTPUT_DIR: ${OUTPUT_DIR}
      BUFFER_SIZE: ${BUFFER_SIZE}
      NEST_SERVER_API_URL: ${NEST_SERVER_API_URL}
      APIKEYS_BUILD: ${APIKEYS_BUILDER_API}
      APIKEYS_NEST_SERVER: ${APIKEYS_NEST_SERVER}
      RABBIT_MQ_URL: ${RABBIT_MQ_URL}
      RABBIT_MQ_RETRY_COUNT: ${RABBIT_MQ_RETRY_COUNT}
      RABBIT_MQ_RETRY_INTERVAL: ${RABBIT_MQ_RETRY_INTERVAL}
    volumes:
      - nbuild_manifests:/app/manifests
      - nbuild_out:/app/out
      - /var/run/docker.sock:/var/run/docker.sock

  # Postgresql database service
  db:
    image: postgres
    restart: on-failure
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
    networks:
      - backend
    volumes:
      - dbdata:/var/lib/postgresql/data

  # RabbitMQ message broker service
  rabbit_mq:
    hostname: rabbit_mq
    image: rabbitmq:3-management
    restart: on-failure
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    networks:
      - backend
    volumes:
      - rabbit:/var/lib/rabbitmq/

networks:
  backend:
  frontend:

volumes:
  dbdata:
    name: "dbdata"
  rabbit:
    name: "rabbit"
  nbuild_manifests:
    name: "nbuild_manifests"
  nbuild_out:
    name: "nbuild_out"
